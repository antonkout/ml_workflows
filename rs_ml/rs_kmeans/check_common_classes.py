"""
Script contains the identification of classes generated by k-means

created: 2022/12/09
author: Antonios Koutroumpas
email: antonkout@gmail.com
"""

from argparse import ArgumentParser, Namespace
import numpy as np
from loguru import logger
import pandas as pd
import warnings
warnings.filterwarnings("ignore")

def check_rows(df1, df2):
    '''This function calculates the difference of means based on the
    previously calculated zonal_statistics of two images, in order
    to identify a common class present in both images.
    ----------
    Parameters
    ----------
        df1: DataFrame. Zonal statistics dataframe from first image
        df2: DataFrame. Zonal statistics dataframe from second image
    '''

    #Get unique class values from the two dataframes
    logger.info(f"Detecting unique values calculated by k-means")
    uni1, uni2 = np.unique(df1['class']), np.unique(df2['class'])
    reslist = []
    #For every unique class value from df1
    logger.info(f"Isolate the calculated zonal-statistics for all bands per class")
    logger.info(f"Calculating the absolute difference")
    logger.info(f"Calculating the mean difference")
    for m in uni1:
        #compare it for every unique class value from df2
        for n in uni2:
            #take the zonal-statistics for all the bands per class
            a = df1[df1['class']==m].iloc[:,:-2].to_numpy()
            b = df2[df2['class']==n].iloc[:,:-2].to_numpy()
            #take the absolute difference, which is a nband (mainly 4band) numpy array
            dif = np.abs(b-a)
            #calculate the mean values per column, and then the mean accross all the mean values
            res = np.mean(np.mean(dif, axis=0).round(0)).round(0).astype(int)
            #threshold to take only the classes that are close to each other
            if res<=50:
                result = [m, n, res]
                reslist.append(result)
    return reslist

def from_paths_to_dfs(path1, path2):
    img1, img2 = path1.split('/',-1)[-1].split('.',-1)[0], path2.split('/',-1)[-1].split('.',-1)[0]
    df1, df2 = pd.read_csv(path1).iloc[:,1:], pd.read_csv(path2).iloc[:,1:]
    return df1, df2, img1, img2

def parse_arguments() -> Namespace:
    main_parser = ArgumentParser(description="Find common classes based on the calculated zonal-statistcs .csv's.")
    subparsers = main_parser.add_subparsers(dest="command", required=True)
   #Main function
    path_parser = subparsers.add_parser(
        "common",
        help="Finds the common k-means classes out of two csv's.",
    )
   #1. Path to csv1
    path_parser.add_argument(
        "--path-to-csv1",
        type=str,
        help="The path to csv file generated from the zonal-statics of first image.",
        required=True,
    )
    #2. Path to csv2
    path_parser.add_argument(
        "--path-to-csv2",
        type=str,
        help="The path to csv file generated from the zonal-statics of second image.",
        required=True,
    )
    return main_parser.parse_args()

if __name__ == "__main__":
    args = parse_arguments()
    if args.command == "common":
        logger.info("Starting the detecting common classes based on difference of means.")
        df1, df2, img1, img2 = from_paths_to_dfs(args.path_to_csv1, args.path_to_csv2)
        reslist = check_rows(df1, df2)
        df = pd.DataFrame(reslist)
        df.columns = [img1, img2, "zonal_difference"]
        df[df.zonal_difference == df.zonal_difference.min()]
        logger.info(f"From image {df.columns[0]} class: {df.iloc[0,0]}")
        logger.info(f"corresponds at image {df.columns[1]} to class: {df.iloc[0,1]}")
        logger.info(f"with a mean zonal value difference {df.iloc[0,2]}")
